}
PMaestroP<-function(pedidos,pronos, inid, tl) {
inicial<-vector()
pronos<-vector()
pedidos<-vector()
PMP1<-vector()
ifinal<-vector()
DPP<-vector()
aux<-vector()
aux2<-vector()
inicial[1]<-1200
aui=1
aux2[1]=0
options(expressions=100)
for ( i in 1: length(pedidos)){
####################PMP####################
aux[i]<-max(pronos[i],pedidos[i])
ifelse(inicial[i]<aux[i], PMP1[i]<-1800, PMP1[i]<-0)
##### inventario final ##################
ifinal[i]<- inicial[i]+PMP1[i]-aux[i]
inicial[i+1]<-ifinal[i]
}
aux
inicial
PMP1
##########################################
######## Disponibilidad para promesa #####
for ( i in 2: length(pedidos)-1) {
ifelse(PMP1[i]==0,aux2[i]<-0,ifelse(PMP1[i+1]>0,aux2[i]<-pedidos[i], aux2[i]<-sum(pedidos[aui:i+1])))
ifelse(PMP1[i]==0,aui<-i,0)
}
ifelse(PMP1[length(pedidos)]==0,aux2[length(pedidos)]<-0,aux2[length(pedidos)]<-pedidos[length(pedidos)])
ifelse( PMP1[1]==0, aux2[1]<-pedidos[1],0)
pedidos
for ( i in 2: length(pedidos)){
ifelse(PMP1[i]==0,DPP[i]<-0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
}
### concadeno todos los vectores en una matriz llamada maestro
maestro<-rbind(inicial[1:(length(inicial)-1)],pronos,pedidos,PMP1,ifinal,DPP)
### A la matrix creada le pongo los nombre a los columnas
colnames(maestro)<-c(seq(from=1,to=length(pedidos)))
return (maestro)
}
pedidos<-c(1200,500,300,200,100,0,0,0)
pronos<-c(800,700,1000,1000,1600,1500,2000,2000)
inid<-1200
PMaestroP(pedidos,pronos,inid,1800)
for ( i in 1: length(pedidos)){
####################PMP####################
aux[i]<-max(pronos[i],pedidos[i])
ifelse(inicial[i]<aux[i], PMP1[i]<-1800, PMP1[i]<-0)
##### inventario final ##################
ifinal[i]<- inicial[i]+PMP1[i]-aux[i]
inicial[i+1]<-ifinal[i]
}
inicial<-vector()
pronos<-vector()
pedidos<-vector()
PMP1<-vector()
ifinal<-vector()
DPP<-vector()
aux<-vector()
aux2<-vector()
inicial[1]<-1200
aui=1
aux2[1]=0
options(expressions=100)
for ( i in 1: length(pedidos)){
####################PMP####################
aux[i]<-max(pronos[i],pedidos[i])
ifelse(inicial[i]<aux[i], PMP1[i]<-1800, PMP1[i]<-0)
##### inventario final ##################
ifinal[i]<- inicial[i]+PMP1[i]-aux[i]
inicial[i+1]<-ifinal[i]
}
pedidos<-c(1200,500,300,200,100,0,0,0)
pronos<-c(800,700,1000,1000,1600,1500,2000,2000)
for ( i in 1: length(pedidos)){
####################PMP####################
aux[i]<-max(pronos[i],pedidos[i])
ifelse(inicial[i]<aux[i], PMP1[i]<-1800, PMP1[i]<-0)
##### inventario final ##################
ifinal[i]<- inicial[i]+PMP1[i]-aux[i]
inicial[i+1]<-ifinal[i]
}
for ( i in 2: length(pedidos)-1) {
ifelse(PMP1[i]==0,aux2[i]<-0,ifelse(PMP1[i+1]>0,aux2[i]<-pedidos[i], aux2[i]<-sum(pedidos[aui:i+1])))
ifelse(PMP1[i]==0,aui<-i,0)
}
ifelse(PMP1[length(pedidos)]==0,aux2[length(pedidos)]<-0,aux2[length(pedidos)]<-pedidos[length(pedidos)])
ifelse( PMP1[1]==0, aux2[1]<-pedidos[1],0)
pedidos
for ( i in 2: length(pedidos)){
ifelse(PMP1[i]==0,DPP[i]<-0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
}
maestro
maestro<-rbind(inicial[1:(length(inicial)-1)],pronos,pedidos,PMP1,ifinal,DPP)
maestro
colnames(maestro)<-c(seq(from=1,to=length(pedidos)))
maestro
ifelse(PMP1[i]==0,DPP[i]<-0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
for ( i in 2: length(pedidos)){
ifelse(PMP1[i]==0,DPP[i]<-0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
}
DPP
for ( i in 2: length(pedidos)){
ifelse(PMP1[i]==0,DPP[i]=0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
}
for ( i in 2: length(pedidos)){
ifelse(PMP1[i]==0,DPP[i]==0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
}
maestro<-rbind(inicial[1:(length(inicial)-1)],pronos,pedidos,PMP1,ifinal,DPP)
maestro
ifelse(PMP1[1]==0,DPP[1]<-0)
ifelse(PMP1[i]==0,DPP[i]<-0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
maestro<-rbind(inicial[1:(length(inicial)-1)],pronos,pedidos,PMP1,ifinal,DPP)
maestro
for ( i in 1: length(pedidos)){
ifelse(PMP1[i]==0,DPP[i]<-0, DPP[i]<-inicial[i]+PMP1[i]-aux2[i])
}
maestro<-rbind(inicial[1:(length(inicial)-1)],pronos,pedidos,PMP1,ifinal,DPP)
maestro
rm(list=ls())
library(foreign)
library (stats)
library(XLConnect)
library(gdata)
library(XLConnect)
library(gdata)
library(zoo)
library(rollmean)
library (forecast)
library(tseries)
library("tseries", lib.loc="~/R/win-library/3.2")
library("timeSeries", lib.loc="~/R/win-library/3.2")
library("TSeriesMMA", lib.loc="~/R/win-library/3.2")
library(stats)
library(nnet)
library(fTrading)
library(mgcv)
library(mgcv)
library(forecast)
library("forecast", lib.loc="~/R/win-library/3.2")
detectCores()
library(knitr)
install.packages("knitr")
library(knitr)
library(rgl)
knit_hooks$set(webgl = hook_webgl)
n <- 1000
theta <- runif(n, 3*pi/2, 9*pi/2)
x1 <- theta*cos(theta)
x2 <- theta*sin(theta)
x3 <- runif(n, 0, 15)
datos <- cbind(x1, x2, x3)
library(rgl)
colores <- rep('lightblue', n)
colores[theta < 6*pi/2] <- 'orange'
plot3d(datos, type='s', size=1.5, col=colores, axes=FALSE, xlab='', ylab='', zlab='', aspect=FALSE)
n <- 100
theta <- runif(n, 3*pi/2, 9*pi/2)
x1 <- theta*cos(theta)
x2 <- theta*sin(theta)
x3 <- runif(n, 0, 15)
datos <- cbind(x1, x2, x3)
library(rgl)
colores <- rep('lightblue', n)
colores[theta < 6*pi/2] <- 'orange'
plot3d(datos, type='s', size=1.5, col=colores, axes=FALSE, xlab='', ylab='', zlab='', aspect=FALSE)
n <- 100000
theta <- runif(n, 3*pi/2, 9*pi/2)
x1 <- theta*cos(theta)
x2 <- theta*sin(theta)
x3 <- runif(n, 0, 15)
datos <- cbind(x1, x2, x3)
library(rgl)
colores <- rep('lightblue', n)
colores[theta < 6*pi/2] <- 'orange'
plot3d(datos, type='s', size=1.5, col=colores, axes=FALSE, xlab='', ylab='', zlab='', aspect=FALSE)
plot3d(datos, type='s', size=1.5, col=colores, axes=FALSE, xlab='', ylab='', zlab='', aspect=FALSE)
n <- 100
theta <- runif(n, 3*pi/2, 9*pi/2)
x1 <- theta*cos(theta)
x2 <- theta*sin(theta)
x3 <- runif(n, 0, 15)
datos <- cbind(x1, x2, x3)
library(rgl)
colores <- rep('lightblue', n)
colores[theta < 6*pi/2] <- 'orange'
plot3d(datos, type='s', size=1.5, col=colores, axes=FALSE, xlab='', ylab='', zlab='', aspect=FALSE)
install.packages("animation")
install.packages("imageMagick")
library(animation)
example 1: simple animated countdown from 10 to "GO!".
png(file="example%03d.png", width=300, heigh=300)
for (i in seq(0, 350 , 10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60)))
}
dev.off()
system("convert -delay 40 *.png example_2_reduced.gif")
library(lattice)
png(file="example%03d.png", width=300, heigh=300)
for (i in seq(0, 350 , 10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60)))
}
b0 <- 10
b1 <- .5
b2 <- .3
g <- expand.grid(x = 1:20, y = 1:20)
g$z <- b0 + b1*g$x + b2*g$y
wireframe(z ~ x * y, data = g)
wireframe(z ~ x * y, data = g)
png(file="example%03d.png", width=300, heigh=300)
for (i in seq(0, 350 , 10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60)))
}
dev.off()
system("convert -delay 40 *.png example_2_reduced.gif")
file.remove(list.files(pattern=".png"))
library(animation)
library(lattice)
b0 <- 10
b1 <- .5
b2 <- .3
g <- expand.grid(x = 1:20, y = 1:20)
g$z <- b0 + b1*g$x + b2*g$y
wireframe(z ~ x * y, data = g)
png(file="example%03d.png", width=300, heigh=300)
for (i in seq(0, 350 , 10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60)))
}
dev.off()
system("convert -delay 40 *.png example_2_reduced.gif")
file.remove(list.files(pattern=".png"))
b0 <- 10
b1 <- .5
b2 <- .3
int12 <- .2
g <- expand.grid(x = 1:20, y = 1:20)
g$z <- b0 + b1*g$x + b2*g$y + int12*g$x*g$y
pdf(file="example_3.pdf", width=4, height=4)
for (i in seq(0, 350 ,10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60),
drape=TRUE))
}
dev.off()
system("convert -delay 40 *.pdf example_3_reduced.gif")
file.remove(list.files(pattern=".png"))
file.remove(list.files(pattern=".pdf"))
library(animation)
saveGIF({for(i in 1:10) plot(runif(10), ylim = 0:1)})
ani.options('convert')
saveGIF({brownian.motion(pch = 21, cex = 5, col = 'red', bg = 'yellow')},
movie.name = 'brownian_motion.gif',
interval = 0.1, nmax = 30, 2), ani.width = 600)
saveGIF({brownian.motion(pch = 21, cex = 5, col = 'red', bg = 'yellow'),
movie.name = 'brownian_motion.gif',
interval = 0.1, nmax = 30, 2), ani.width = 600)
saveGIF({brownian.motion(pch = 21, cex = 5, col = 'red', bg = 'yellow')},
movie.name = 'brownian_motion2.gif',
interval = runif(30, .01, 1), nmax = 30)
b0 <- 10
b1 <- .5
b2 <- .3
int12 <- .2
g <- expand.grid(x = 1:20, y = 1:20)
g$z <- b0 + b1*g$x + b2*g$y + int12*g$x*g$y
pdf(file="example_3.pdf", width=4, height=4)
for (i in seq(0, 350 ,10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60),
drape=TRUE))
}
dev.off()
system("convert -delay 40 *.pdf example_3_reduced.gif")
system("convert -delay 40 *.pdf example_3_reduced.gif")
library(animation)
ani.options(interval = 0.2, nmax = 10)
for (i in 1:ani.options('nmax')) {
plot(rnorm(30))
ani.pause()   ## pause for a while ('interval')
}
'(x, y), x = x + rnorm(1) and y = y + rnorm(1).'))
saveGIF({
ani.options(nmax = 30)
brownian.motion(pch = 21, cex = 5, col = 'red', bg = 'yellow')
}, interval = 0.05, movie.name = 'bm_demo.gif', ani.width = 600, ani.height = 600)
saveSWF({
par(mar = c(3, 2.5, 1, 0.2), pch = 20, mgp = c(1.5, 0.5, 0))
buffon.needle(type = 'S')
}, ani.dev = 'pdf', ani.type = 'pdf', swf.name = 'buffon.swf',
interval = 0.1, nmax = 40, ani.height = 7, ani.width = 7)
library(animation)
#Set delay between frames when replaying
ani.options(interval=.05)
# Set up a vector of colors for use below
col.range <- heat.colors(15)
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:150) {
# Pull 100 observations from a normal distribution
# and add a constant based on the iteration to move the distribution
chunk <- rnorm(100)+sqrt(abs((i)-51))
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
# Dress it up a little just for fun
plot(-5, xlim = c(1,150), ylim = c(0, .3), axes = F, xlab = “”, ylab = “”, main = “Iteration”)
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set the color of the bottom chart based on the distance of the distribution’s mean from 0
par(fg = col.range[mean(chunk)+3])
# Set up the bottom chart
plot(density(chunk), main = “”, xlab = “X Value”, xlim = c(-5, 15), ylim = c(0, .6))
# Add a line that indicates the mean of the distribution. Add additional lines to track
# previous means
abline(v=mean(chunk), col = rgb(255, 0, 0, 255, maxColorValue=255))
if (exists(“lastmean”)) {abline(v=lastmean, col = rgb(255, 0, 0, 50, maxColorValue=255)); prevlastmean <- lastmean;}
if (exists(“prevlastmean”)) {abline(v=prevlastmean, col = rgb(255, 0, 0, 25, maxColorValue=255))}
#Fix last mean calculation
lastmean <- mean(chunk)
}
})
library(animation)
ani.options(interval=.05)
col.range <- heat.colors(15)
saveGIF({
# For the most part, it’s safest to start with graphical settings in
# the animation loop, as the loop adds a layer of complexity to
# manipulating the graphs. For example, the layout specification needs to
# be within animation loop to work properly.
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
# Begin the loop that creates the 150 individual graphs
for (i in 1:150) {
# Pull 100 observations from a normal distribution
# and add a constant based on the iteration to move the distribution
chunk <- rnorm(100)+sqrt(abs((i)-51))
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
# Dress it up a little just for fun
plot(-5, xlim = c(1,150), ylim = c(0, .3), axes = F, xlab = “”, ylab = “”, main = “Iteration”)
abline(v=i, lwd=5, col = rgb(0, 0, 255, 255, maxColorValue=255))
abline(v=i-1, lwd=5, col = rgb(0, 0, 255, 50, maxColorValue=255))
abline(v=i-2, lwd=5, col = rgb(0, 0, 255, 25, maxColorValue=255))
# Bring back the X axis
axis(1)
# Set the color of the bottom chart based on the distance of the distribution’s mean from 0
par(fg = col.range[mean(chunk)+3])
# Set up the bottom chart
plot(density(chunk), main = “”, xlab = “X Value”, xlim = c(-5, 15), ylim = c(0, .6))
# Add a line that indicates the mean of the distribution. Add additional lines to track
# previous means
abline(v=mean(chunk), col = rgb(255, 0, 0, 255, maxColorValue=255))
if (exists(“lastmean”)) {abline(v=lastmean, col = rgb(255, 0, 0, 50, maxColorValue=255)); prevlastmean <- lastmean;}
if (exists(“prevlastmean”)) {abline(v=prevlastmean, col = rgb(255, 0, 0, 25, maxColorValue=255))}
#Fix last mean calculation
lastmean <- mean(chunk)
}
})
install.packages("ggplot2")
install.packages("gganimate")
b0 <- 10
b1 <- .5
b2 <- .3
int12 <- .2
g <- expand.grid(x = 1:20, y = 1:20)
g$z <- b0 + b1*g$x + b2*g$y + int12*g$x*g$y
pdf(file="example_3.pdf", width=4, height=4)
for (i in seq(0, 350 ,10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60),
drape=TRUE))
}
dev.off()
system("convert -delay 40 *.pdf example_3_reduced.gif")
file.remove(list.files(pattern=".pdf"))
install.packages("sna")
install.packages("network")
install.packages("statnet.common")
library(network)
library(statnet.common)
library(sna)
dim <- 10
num <-  dim^2
ww="C:/Users/Z230/Google Drive/R"
actual <- matrix(round(runif(num)), nrow=dim, ncol=dim)
suppressMessages(library("sna"))
png("p2_t0.png")
plot.sociomatrix(actual, diaglab=FALSE, main="Inicio")
graphics.off()
paso <- function(pos) {
fila <- floor((pos - 1) / dim) + 1
columna <- ((pos - 1) %% dim) + 1
vecindad <-  actual[max(fila - 1, 0) : min(fila + 1, dim),
max(columna - 1, 0): min(columna + 1, dim)]
return(1 * ((sum(vecindad) - actual[fila, columna]) == 3))
}
cluster <- makeCluster(detectCores() - 1)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "dim")
clusterExport(cluster, "paso")
for (iteracion in 1:9) {
clusterExport(cluster, "actual")
siguiente <- parSapply(cluster, 1:num, paso)
if (sum(siguiente) == 0) { # todos murieron
print("Ya no queda nadie vivo.")
break;
}
actual <- matrix(siguiente, nrow=dim, ncol=dim, byrow=TRUE)
salida = paste("p2_t", iteracion, ".png", sep="")
tiempo = paste("Paso", iteracion)
png(salida)
plot.sociomatrix(actual, diaglab=FALSE, main=tiempo)
#graphics.off()
}
stopCluster(cluster)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "dim")
clusterExport(cluster, "paso")
for (iteracion in 1:9) {
clusterExport(cluster, "actual")
siguiente <- parSapply(cluster, 1:num, paso)
if (sum(siguiente) == 0) { # todos murieron
print("Ya no queda nadie vivo.")
break;
}
actual <- matrix(siguiente, nrow=dim, ncol=dim, byrow=TRUE)
salida = paste("p2_t", iteracion, ".png", sep="")
tiempo = paste("Paso", iteracion)
png(salida)
plot.sociomatrix(actual, diaglab=FALSE, main=tiempo)
#graphics.off()
}
plot.sociomatrix(actual, diaglab=FALSE, main=tiempo)
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_4/Graficas")
replica1<-seq(0:217)
replica1<-seq(0:217)
frames=lapply(replica1,function(x) image_read(paste("P4R2_600",x,".png",sep="")))
library(parallel)
library(magick)
replica1<-seq(0:217)
frames=lapply(replica1,function(x) image_read(paste("P4R2_600",x,".png",sep="")))
frames=lapply(replica1,function(x) image_read(paste("P4R2_600_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=40 )
replica1<-seq(0:217)
frames=lapply(replica1,function(x) image_read(paste("P4R2_600_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=40 )
print(animation)
w3<-paste("P4R2_Voronoi_600", ".gif"  )
image_write(animation, w3)
frames=lapply(replica1,function(x) image_read(paste("P4R2_600_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=20 )
print(animation)
w3<-paste("P4R2_Voronoi_600", ".gif"  )
image_write(animation, w3)
replica1<-seq(0:102)
frames=lapply(replica1,function(x) image_read(paste("P4R2_300_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=20 )
print(animation)
w3<-paste("P4R2_Voronoi_300", ".gif"  )
image_write(animation, w3)
replica1<-seq(0:69)
frames=lapply(replica1,function(x) image_read(paste("P4R2_100_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=20 )
print(animation)
w3<-paste("P4R2_Voronoi_100", ".gif"  )
function (paths, density, depth)
frames=lapply(replica1,function(x) image_read(paste("P4R2_100_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=20 )
print(animation)
w3<-paste("P4R2_Voronoi_100", ".gif"  )
image_write(animation, w3)
frames=lapply(replica1,function(x) image_read(paste("P4R2_100_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=20 )
print(animation)
w3<-paste("P4R2_Voronoi_100", ".gif"  )
image_write(animation, w3)
frames=lapply(replica1,function(x) image_read(paste("P4R2_100_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=20 )
print(animation)
w3<-paste("P4R2_Voronoi_100", ".gif"  )
image_write(animation, w3)
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_4/Graficas")
replica1<-seq(0:97)
frames=lapply(replica1,function(x) image_read(paste("P4R2_200_",x,".png",sep="")))
animation <- image_animate(image_join(frames),fps=20 )
print(animation)
w3<-paste("P4R2_Voronoi_200", ".gif"  )
image_write(animation, w3)
