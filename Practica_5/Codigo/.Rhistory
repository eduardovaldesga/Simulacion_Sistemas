clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r),rbind( res,b-a))
}
}
View(datos)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
View(datos)
datos<-rbind(datos,c(mues[r], r[r], res[r],b[r]-a[r]))
datos<-rbind(datos,c(mues[r], r[r], res[r],b[r]-a[r]))
View(datos)
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
repetir<-4
for ( r in repetir){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res<-((pi / 2) * integral)
datos<-rbind(datos,c(mues[r], r[r], res[r],b[r]-a[r]))
}
}
View(datos)
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
repetir<-4
for ( r in repetir){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
View(datos)
datos<-data.frame(matrix(vector(), 0,4  ))
View(datos)
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
repetir<-4
for ( r in repetir){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
View(datos)
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
repetir<-4
a<-vector()
b<-vector()
for ( r in repetir){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
View(datos)
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
for ( r in 1:3){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
View(datos)
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
res<-vector()
for ( r in 1:3){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res[r]<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
res<-vector()
for ( r in 1){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res[r]<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
stopImplicitCluster()
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
#res<-vector()
for ( r in 1){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
View(datos)
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
as.numeric(datos$Pi)
View(datos)
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
res<-vector()
for ( r in 30){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res[r]<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
datos<-data.frame(matrix(vector(), 0,4  ))
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
res<-vector()
for ( r in 30){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res[r]<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
res<-vector()
for ( r in 1:3){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res[r]<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
View(datos)
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
stopImplicitCluster()
boxplot(Pi~Muestra, data=datos)
datos<-data.frame(matrix(vector(), 0,4  ))
#mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
res<-vector()
for ( r in 1:30){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res[r]<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
stopImplicitCluster()
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
boxplot(Pi~Muestra, data=datos)
suppressMessages(library(distr))
rm(list=ls())                  ### Borro la memoria de R
inicio <- -6
final <- -inicio
paso <- 0.25
x <- seq(inicio, final, paso)
f <- function(x) { return(1 / (exp(x) + exp(-x))) }
png("p5f.png") # dibujamos f(x) para ver como es
plot(x,  (2/pi) * (1/(exp(x)+exp(-x))))
lines(x,  (2/pi) * (1/(exp(x)+exp(-x))), type="l")
graphics.off()
g <- function(x) { return((2 / pi) * f(x)) }
generador  <- r(AbscontDistribution(d = g)) # creamos un generador
parte <- function() {  valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}
x<-seq(from=-6, to=6, length.out = 300)
fx<-1/(exp(x)+exp(-x))
gx<-2*fx/pi
plot(gx~x)
datos<-data.frame(matrix(vector(), 0,4  ))
mu<-c(50000,50000*1.5,50000*2,50000*2.5,50000*3,50000*5,50000*50 )
#mu<-c(50,500, 1000)
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "parte")
clusterExport(cluster,"mu")
clusterExport(cluster,"g")
clusterExport(cluster,"f")
for ( mues in mu){
clusterExport(cluster,"mues")
muestra <- generador(mues) # sacamos una muestra
desde <- 3
hasta <- 7
pedazo <- 500000
cuantos <- 500
#repetir<-4
a<-vector()
b<-vector()
res<-vector()
for ( r in 1:30){
clusterExport(cluster,"r")
clusterExport(cluster,"desde")
clusterExport(cluster,"hasta")
clusterExport(cluster,"generador")
a[r]<-Sys.time()
montecarlo<-parSapply(cluster,1:cuantos,function(x) {valores <- generador(mues)
return(sum(valores >= desde & valores <= hasta))
}   )
b[r]<-Sys.time()
integral <- sum(montecarlo) / (cuantos * pedazo)
res[r]<-((pi / 2) * integral)
datos<-rbind(datos,c(mues, r, res[r],b[r]-a[r]))
}
}
stopImplicitCluster()
colnames(datos)<-c("Muestra","Repe" , "Pi","Tiempo")
write.csv(datos, file="P5_N.csv")
setwd("C:/Users/Z230/Dropbox/PISIS/PhD/Simulacion_Sistemas/Practica_5/Codigo")
write.csv(datos, file="P5_N.csv")
write.csv(datos, file="P5_N_datos.csv")
boxplot(Pi~Muestra, data=datos)
